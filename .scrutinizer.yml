checks:
    php:
        verify_property_names: true
        uppercase_constants: true
        simplify_boolean_return: true
        properties_in_camelcaps: true
        parameters_in_camelcaps: true
        return_doc_comments: true
        parameter_doc_comments: true
        optional_parameters_at_the_end: true
        no_short_variable_names:
            minimum: '3'
        no_new_line_at_end_of_file: true
        no_long_variable_names:
            maximum: '20'
        no_goto: true
        naming_conventions:
            local_variable: '^[a-z][a-zA-Z0-9]*$'
            constant_name: '^[A-Z][A-Z0-9]*(?:_[A-Z0-9]+)*$'
            property_name: '^[a-z][a-zA-Z0-9]*$'
            method_name: '^(?:[a-z]|__)[a-zA-Z0-9]*$'
            parameter_name: '^[a-z][a-zA-Z0-9]*$'
            interface_name: '^I[A-Z][a-zA-Z0-9]*$'
            type_name: '^[A-Z][a-zA-Z0-9]*$'
            exception_name: '^[A-Z][a-zA-Z0-9]*Exception$'
            isser_method_name: '^(?:is|has|should|may|supports)'
        function_in_camel_caps: true
        encourage_postdec_operator: true
        classes_in_camel_caps: true
        check_method_contracts:
            verify_interface_like_constraints: true
            verify_documented_constraints: true
            verify_parent_constraints: true
        avoid_multiple_statements_on_same_line: true
        align_assignments: false
        prefer_while_loop_over_for_loop: true
        overriding_parameter: true
        no_short_method_names:
            minimum: '3'
        symfony_request_injection: false
        single_namespace_per_use: false
        psr2_class_declaration: false
        psr2_switch_declaration: false
        avoid_closing_tag: false
        avoid_entity_manager_injection: false
        avoid_usage_of_logical_operators: false

coding_style:
    php:
        indentation:
            general:
                use_tabs: false
                size: 2
            switch:
                indent_case: true
        spaces:
            general:
                linefeed_character: newline
            before_parentheses:
                function_declaration: false
                closure_definition: false
                function_call: false
                if: false
                for: false
                while: false
                switch: false
                catch: false
                array_initializer: false
            around_operators:
                assignment: true
                logical: true
                equality: true
                relational: true
                bitwise: true
                additive: true
                multiplicative: true
                shift: true
                unary_additive: false
                concatenation: true
                negation: false
            before_left_brace:
                class: true
                function: true
                if: true
                else: true
                for: true
                while: true
                do: true
                switch: true
                try: true
                catch: true
                finally: true
            before_keywords:
                else: true
                while: true
                catch: true
                finally: true
            within:
                brackets: false
                array_initializer: false
                grouping: false
                function_call: false
                function_declaration: false
                if: false
                for: false
                while: false
                switch: false
                catch: false
                type_cast: false
            ternary_operator:
                before_condition: true
                after_condition: true
                before_alternative: true
                after_alternative: true
                in_short_version: false
            other:
                before_comma: false
                after_comma: true
                before_semicolon: false
                after_semicolon: true
                after_type_cast: true
        braces:
            classes_functions:
                class: end-of-line
                function: end-of-line
                closure: end-of-line
            if:
                opening: end-of-line
                always: true
                else_on_new_line: false
            for:
                opening: end-of-line
                always: true
            while:
                opening: end-of-line
                always: true
            do_while:
                opening: end-of-line
                always: true
                while_on_new_line: false
            switch:
                opening: end-of-line
            try:
                opening: end-of-line
                catch_on_new_line: false
                finally_on_new_line: false
        upper_lower_casing:
            keywords:
                general: lower
            constants:
                true_false_null: undefined

build:
    environment:
        php:
            version: 7.1
        postgresql: false
        redis: false
        rabbitmq: false
    nodes:
        tests:
            tests:
                override:
                    - php-scrutinizer-run
                    - wget https://www.phing.info/get/phing-latest.phar && mv phing-latest.phar phing && chmod +x phing
                    - composer install --prefer-dist --no-progress --no-suggest --no-interaction
                    -
                        command: ./vendor/bin/phpcs . --extensions=php,phpt --report=checkstyle --report-file=codesniffer.cs --standard=vendor/nexendrie/code-quality/ruleset.xml
                        analysis:
                            file: codesniffer.cs
                            format: 'general-checkstyle'
                    -
                        command: ./phing ci-coverage
                        coverage:
                            file: coverage.xml
                            format: php-clover
